import React from "react";
import ReactDOM from "react-dom";

// Refs and Dom
// ForwardRef

// Рефы дают возможность получить доступ к DOM-узлам или React-элементам, созданным в рендер-методе

// Когда вам требуется императивно изменить дочерний элемент, обойдя обычный поток данных. Подлежащий изменениям дочерний элемент может быть как React-компонентом, так и DOM-элементом.

// Ситуации, в которых использования рефов является оправданным:
// - Управление фокусом, выделение текста или воспроизведение медиа.
// - Императивный вызов анимаций.
// - Интеграция со сторонними DOM-библиотеками.

// Избегать использования рефов в ситуациях, когда задачу можно решить декларативным способом.

// Рефы создаются с помощью:
//  React.createRef()
//  (elem) => this.elemetRef = element - CallBackRef
//  и прикрепляются к React-элементам через ref атрибут. Обычно рефы присваиваются свойству экземпляра класса в конструкторе, чтобы на них можно было ссылаться из любой части компонента.

// Когда реф передаётся элементу в методе render, ссылка на данный узел доступна через свойство рефа current
// const node = this.myRef.current;

// Значение рефа отличается в зависимости от типа узла:

// - Когда атрибут ref используется с HTML-элементом, свойство current созданного рефа в конструкторе с помощью React.createRef() получает соответствующий DOM-элемент.
// - Когда атрибут ref используется с классовым компонентом, свойство current объекта-рефа получает экземпляр смонтированного компонента.
// - Нельзя использовать ref атрибут с функциональными компонентами, потому что для них не создаётся экземпляров.

// React присвоит DOM-элемент свойству current при монтировании компонента и присвоит обратно значение null при размонтировании. Обновление свойства ref происходит перед вызовом методов componentDidMount и componentDidUpdate.

// Если вам нужен реф на функциональный компонент, можете воспользоваться:

// forwardRef (возможно вместе с useImperativeHandle)
const MyForwardRef = React.forwardRef((props, ref) => (
  // В React.forwardRef передаётся функция рендеринга. Эта функция определяет, как будет называться компонент в инструментах разработки.
  // Второй аргумент ref существует только в том случае, если вы создаёте компонент через функцию React.forwardRef. Обычные функциональные или классовые компоненты не получают ref в качестве аргумента или пропа.

  <input ref={ref} />
  // Перенаправить реф можно не только в DOM-компонент, но и в экземпляр классового компонента.
));
// Таким образом, когда мы будем применять MyForwardRef в других компонентах, мы сможем получить реф находящегося в нём DOM-узла input и использовать его так же, как если бы мы рендерили непосредственно input.

function MyFunctionComponent() {
  return <input />;
}

class Parent extends React.Component {
  constructor(props) {
    super(props);
    this.textInput = React.createRef();
  }

  render() {
    return (
      <>
        {/* Warning: Function components cannot be given refs: */}
        {/* <MyFunctionComponent ref={this.textInput} /> */}

        <MyForwardRef ref={this.textInput} />
      </>
    );
  }
}

ReactDOM.render(<Parent />, document.getElementById("root"));

// Если вы используете React версии 16.2 или ниже, или если вам нужно решение более гибкое, чем перенаправление рефов, вы можете явно передавать реф как проп с другим именем.

// По возможности, мы советуем избегать передачи DOM-узлов, но это может быть полезной лазейкой. Заметим, что данный подход требует добавления кода в дочерний компонент. Если у вас нет никакого контроля над реализацией дочернего компонента, последним вариантом является использование findDOMNode(), но такое решение не рекомендуется и не поддерживается в StrictMode.

// CallBackRef
// Данная функция получит экземпляр React-компонента или HTML DOM-элемент в качестве аргумента

// React вызовет ref колбэк с DOM-элементом при монтировании компонента, а также вызовет его со значением null при размонтировании. Рефы будут хранить актуальное значение перед вызовом методов componentDidMount или componentDidUpdate.

// Вы можете передавать колбэк-рефы между компонентами точно так же, как и объектные рефы, созданные через React.createRef()

// Если ref колбэк определён как встроенная функция, колбэк будет вызван дважды во время обновлений: первый раз со значением null, а затем снова с DOM-элементом.
