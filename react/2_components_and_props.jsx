// Components and props

// Во многом компоненты ведут себя как обычные функции JavaScript. Они принимают произвольные входные данные (так называемые «пропсы») и возвращают React-элементы, описывающие, что мы хотим увидеть на экране.

function WelcomeFunc(props) {
  return <h1>Привет, {props.name}</h1>;
}

const element = <WelcomeFunc name={"Eugene"} />;

// Когда React встречает подобный элемент, он собирает все JSX-атрибуты и дочерние элементы в один объект и передаёт их нашему компоненту. Этот объект называется «пропсы» (props).

// Эта функция — компонент, потому что она получает данные в одном объекте («пропсы») в качестве параметра и возвращает React-элемент. Мы будем называть такие компоненты «функциональными», так как они буквально являются функциями.

// Ещё компоненты можно определять как классы ES6:

class WelcomeClass extends React.Component {
  render() {
    return <h2>Привет, {this.props.name}</h2>;
  }
}

// С точки зрения React, эти два компонента эквивалентны

// Если компонент начинается с маленькой буквы, React принимает его за DOM-тег.

// Компоненты могут ссылаться на другие компоненты в возвращённом ими дереве. Это позволяет нам использовать одну и ту же абстракцию — компоненты — на любом уровне нашего приложения

function App() {
  return (
    <div>
      <WelcomeFunc name="Eugene" />
      <WelcomeClass name="Nika" />
      <WelcomeFunc name="Tom" />
    </div>
  );
}

// Пропсы следует называть так, чтобы они имели смысл в первую очередь с точки зрения самого компонента, а уже во вторую тех компонентов, которые его рендерят.

// React-компоненты обязаны вести себя как чистые функции  по отношению к своим пропсам. ( никогда не должен что-то записывать в свои пропсы)
