// Lists and Keys
// Вы можете создать коллекцию элементов и встроить её в JSX с помощью фигурных скобок {}.

import React from "react";
import ReactDOM from "react-dom";

function NumberList(props) {
  const numbers = props.numbers;
  // Как правило, элементам внутри map() нужны ключи.

  const listItems = numbers.map((number) => <li key={number.toString()}>{number}</li>);

  return <ul>{listItems}</ul>;
}

const numbers = [1, 2, 3, 4, 5];
ReactDOM.render(<NumberList numbers={numbers} />, document.getElementById("root"));

// «Ключ» — это специальный строковый атрибут, который нужно указывать при создании списка элементов.
// Ключи помогают React определять, какие элементы были изменены, добавлены или удалены. Их необходимо указывать, чтобы React мог сопоставлять элементы массива с течением времени

// Не рекомендуем использовать индексы как ключи, если порядок элементов может поменяться. Это негативно скажется на производительности и может вызвать проблемы с состоянием компонента. React по умолчанию будет использовать индексы как ключи.

// Ключи нужно определять непосредственно внутри массивов.

// По умолчанию при рекурсивном обходе дочерних элементов DOM-узла React проходит по обоим спискам потомков одновременно и создаёт мутацию, когда находит отличие.
//Когда у дочерних элементов есть ключи, React использует их, чтобы сопоставить потомков исходного дерева с потомками последующего дерева.

// Ключ должен быть уникальным только среди его соседей, а не глобально

// В крайнем случае вы можете передать индекс элемента массива в качестве ключа. Это работает хорошо в случае, если элементы никогда не меняют порядок. Перестановки элементов вызывают замедление.

// Ключи служат подсказками для React, но они никогда не передаются в ваши компоненты. Вы не может прочитать значение props.key.
